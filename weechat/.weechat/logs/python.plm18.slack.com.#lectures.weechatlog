2018-03-16 14:38:10		getting channel history...
2018-01-06 00:54:11	-->		@timm has joined the channel 
2018-01-06 00:55:56	timm	:thumbsup: 
2018-01-09 16:37:01	-->		@hfernan has joined the channel 
2018-01-09 17:09:02	-->		@Anastasia has joined the channel 
2018-01-16 16:31:12	-->		@cjhall3 has joined the channel 
2018-01-16 16:31:29	-->		@SamuelHenderson has joined the channel 
2018-01-16 16:31:41	-->		@adbishel has joined the channel 
2018-01-16 16:31:42	-->		@ThomasDickerson has joined the channel 
2018-01-16 16:31:48	-->		@ejgillia has joined the channel 
2018-01-16 16:31:51	-->		@AnthonySu has joined the channel 
2018-01-16 16:31:52	-->		@wjglas has joined the channel 
2018-01-16 16:31:53	-->		@Wenting has joined the channel 
2018-01-16 16:31:54	-->		@gjabell has joined the channel 
2018-01-16 16:31:58	-->		@Dan.Grochmal has joined the channel 
2018-01-16 16:31:59	-->		@patrick_xia has joined the channel 
2018-01-16 16:32:01	-->		@cnkeesee has joined the channel 
2018-01-16 16:32:32	-->		@aawasth has joined the channel 
2018-01-16 16:32:54	-->		@bcmorri3 has joined the channel 
2018-01-16 16:33:04	-->		@GradyStewart has joined the channel 
2018-01-16 16:33:14	-->		@AlexPhelps has joined the channel 
2018-01-16 16:37:48	-->		@jmphipps has joined the channel 
2018-01-29 22:54:26	timm	if those who want some more Python tutoring, i'll be running another Python101 session in 3240 3pm to 4pm 
2018-02-08 17:01:07	timm	https://github.com/timm/sandbox/blob/master/machines.py
2018-02-08 17:01:07		timm/sandbox
2018-02-08 17:01:07		sandbox - some throwaway stuff that you shoudl ignore 
2018-02-08 17:13:04	timm	https://github.com/timm/sandbox/blob/master/games.py
2018-02-08 17:13:04		timm/sandbox
2018-02-08 17:13:04		sandbox - some throwaway stuff that you shoudl ignore 
2018-02-08 17:38:33	timm	https://github.com/txt/plm18/blob/master/src/python/rpn.py
2018-02-08 17:38:33		txt/plm18
2018-02-08 17:38:33		plm18 - programming languages and modeling, NCSU 2018 
2018-02-10 18:03:59	timm	Materials for week of Feb12:
2018-02-10 18:03:59		- https://github.com/txt/plm18/blob/master/doc/syntax.md
2018-02-10 18:03:59		- https://github.com/txt/plm18/blob/master/doc/lambda.md
2018-02-10 18:03:59		txt/plm18
2018-02-10 18:03:59		plm18 - programming languages and modeling, NCSU 2018 
2018-02-14 22:33:28	timm	@timm uploaded a file: https://plm18.slack.com/files/U8N7K9BF0/F99H5EA6R/image.png (fixed RPN trace) and commented: i've just fixed the bad display of the RPN interpreter in https://github.com/txt/plm18/blob/master/doc/syntax.md. now it works as expected 
2018-02-27 16:57:28	timm	https://github.com/timm/ish/blob/master/src/misc/life.lisp
2018-02-27 16:57:28		timm/ish
2018-02-27 16:57:28		(Some (useful (ish)) LISP) 
2018-02-27 17:41:33	timm	https://github.com/norvig/pytudes/blob/master/py/lis.py ; the real lisp
2018-02-27 17:41:33		norvig/pytudes
2018-02-27 17:41:33		pytudes - Python programs to practice or demonstrate skills. 
2018-02-27 17:42:01	timm	https://github.com/norvig/pytudes/blob/master/py/lispy.py ; better lisp
2018-02-27 17:42:01		norvig/pytudes
2018-02-27 17:42:01		pytudes - Python programs to practice or demonstrate skills. 
2018-02-27 17:45:04	timm	https://www.amazon.com/Paradigms-Artificial-Intelligence-Programming-Studies/dp/1558601910 
2018-03-13 10:16:56	timm	See #proj3_apr13 
2018-03-13 17:04:20	timm	Kotlin: https://medium.com/@magnus.chatt/why-you-should-totally-switch-to-kotlin-c7bbde9e10d5
2018-03-13 17:04:20		Why you should totally switch to Kotlin ? Magnus Vinther ? Medium
2018-03-13 17:04:20		It?s time to start using a modern programming language
2018-03-13 17:04:20		Reading time 7 min read 
2018-03-13 17:05:53	timm	http://www.amber-lang.net/ 
2018-03-14 16:24:41	timm	For thursday:
2018-03-14 16:24:41		0) Next project: https://github.com/txt/plm18/blob/master/doc/proj3.md
2018-03-14 16:24:41		1) tuesday was abut layers, where a layer was something you could snapshot and freeze or move to another CPU. another kind of layer is a  source-to-source compiler, transcompiler or transpiler  where some new language is compiled to existing underlying language. 
2018-03-14 16:24:41		1a) e.g. coffeescript to javascript: http://coffeescript.org/#top
2018-03-14 16:24:41		1b) e.g. clojure to JVM
2018-03-14 16:24:41		2) More on "I :heart: lambdas" and their application to modern languages:
2018-03-14 16:24:41		2a) RACKET (child of PLT Scheme, child of SCHEME, child of LISP, child of the lambda calculus)  https://beautifulracket.com/explainer/data-structures.html
2018-03-14 16:24:41		2b) a peek a "OO in lambdas".  http://people.cs.aau.dk/%7Enormark/prog3-03/html/notes/oop-scheme_themes-classes-objects-sec.html#oop-scheme_classes-objects_title_1. For zero points, what is the distance between section 29.4 and python?
2018-03-14 16:24:41		Classes and objects in Scheme
2018-03-14 16:24:41		xxx  (edited)
2018-04-08 13:24:54	timm	For Tuesday
2018-04-08 13:24:54		https://www.youtube.com/watch?v=52SVAMM3V78&feature=share 
2018-04-19 16:43:47		getting channel history...
2018-01-06 00:54:11	-->		@timm has joined the channel 
2018-01-06 00:55:56	timm	:thumbsup: 
2018-01-09 16:37:01	-->		@hfernan has joined the channel 
2018-01-09 17:09:02	-->		@Anastasia has joined the channel 
2018-01-16 16:31:12	-->		@cjhall3 has joined the channel 
2018-01-16 16:31:29	-->		@SamuelHenderson has joined the channel 
2018-01-16 16:31:41	-->		@adbishel has joined the channel 
2018-01-16 16:31:42	-->		@ThomasDickerson has joined the channel 
2018-01-16 16:31:48	-->		@ejgillia has joined the channel 
2018-01-16 16:31:51	-->		@AnthonySu has joined the channel 
2018-01-16 16:31:52	-->		@wjglas has joined the channel 
2018-01-16 16:31:53	-->		@Wenting has joined the channel 
2018-01-16 16:31:54	-->		@gjabell has joined the channel 
2018-01-16 16:31:58	-->		@Dan.Grochmal has joined the channel 
2018-01-16 16:31:59	-->		@patrick_xia has joined the channel 
2018-01-16 16:32:01	-->		@cnkeesee has joined the channel 
2018-01-16 16:32:32	-->		@aawasth has joined the channel 
2018-01-16 16:32:54	-->		@bcmorri3 has joined the channel 
2018-01-16 16:33:04	-->		@GradyStewart has joined the channel 
2018-01-16 16:33:14	-->		@AlexPhelps has joined the channel 
2018-01-16 16:37:48	-->		@jmphipps has joined the channel 
2018-01-29 22:54:26	timm	if those who want some more Python tutoring, i'll be running another Python101 session in 3240 3pm to 4pm 
2018-02-08 17:01:07	timm	https://github.com/timm/sandbox/blob/master/machines.py
2018-02-08 17:01:07		timm/sandbox
2018-02-08 17:01:07		sandbox - some throwaway stuff that you shoudl ignore 
2018-02-08 17:13:04	timm	https://github.com/timm/sandbox/blob/master/games.py
2018-02-08 17:13:04		timm/sandbox
2018-02-08 17:13:04		sandbox - some throwaway stuff that you shoudl ignore 
2018-02-08 17:38:33	timm	https://github.com/txt/plm18/blob/master/src/python/rpn.py
2018-02-08 17:38:33		txt/plm18
2018-02-08 17:38:33		plm18 - programming languages and modeling, NCSU 2018 
2018-02-10 18:03:59	timm	Materials for week of Feb12:
2018-02-10 18:03:59		- https://github.com/txt/plm18/blob/master/doc/syntax.md
2018-02-10 18:03:59		- https://github.com/txt/plm18/blob/master/doc/lambda.md
2018-02-10 18:03:59		txt/plm18
2018-02-10 18:03:59		plm18 - programming languages and modeling, NCSU 2018 
2018-02-14 22:33:28	timm	@timm uploaded a file: https://plm18.slack.com/files/U8N7K9BF0/F99H5EA6R/image.png (fixed RPN trace) and commented: i've just fixed the bad display of the RPN interpreter in https://github.com/txt/plm18/blob/master/doc/syntax.md. now it works as expected 
2018-02-27 16:57:28	timm	https://github.com/timm/ish/blob/master/src/misc/life.lisp
2018-02-27 16:57:28		timm/ish
2018-02-27 16:57:28		(Some (useful (ish)) LISP) 
2018-02-27 17:41:33	timm	https://github.com/norvig/pytudes/blob/master/py/lis.py ; the real lisp
2018-02-27 17:41:33		norvig/pytudes
2018-02-27 17:41:33		pytudes - Python programs to practice or demonstrate skills. 
2018-02-27 17:42:01	timm	https://github.com/norvig/pytudes/blob/master/py/lispy.py ; better lisp
2018-02-27 17:42:01		norvig/pytudes
2018-02-27 17:42:01		pytudes - Python programs to practice or demonstrate skills. 
2018-02-27 17:45:04	timm	https://www.amazon.com/Paradigms-Artificial-Intelligence-Programming-Studies/dp/1558601910 
2018-03-13 10:16:56	timm	See #proj3_apr13 
2018-03-13 17:04:20	timm	Kotlin: https://medium.com/@magnus.chatt/why-you-should-totally-switch-to-kotlin-c7bbde9e10d5
2018-03-13 17:04:20		Why you should totally switch to Kotlin ? Magnus Vinther ? Medium
2018-03-13 17:04:20		It?s time to start using a modern programming language
2018-03-13 17:04:20		Reading time 7 min read 
2018-03-13 17:05:53	timm	http://www.amber-lang.net/ 
2018-03-14 16:24:41	timm	For thursday:
2018-03-14 16:24:41		0) Next project: https://github.com/txt/plm18/blob/master/doc/proj3.md
2018-03-14 16:24:41		1) tuesday was abut layers, where a layer was something you could snapshot and freeze or move to another CPU. another kind of layer is a  source-to-source compiler, transcompiler or transpiler  where some new language is compiled to existing underlying language. 
2018-03-14 16:24:41		1a) e.g. coffeescript to javascript: http://coffeescript.org/#top
2018-03-14 16:24:41		1b) e.g. clojure to JVM
2018-03-14 16:24:41		2) More on "I :heart: lambdas" and their application to modern languages:
2018-03-14 16:24:41		2a) RACKET (child of PLT Scheme, child of SCHEME, child of LISP, child of the lambda calculus)  https://beautifulracket.com/explainer/data-structures.html
2018-03-14 16:24:41		2b) a peek a "OO in lambdas".  http://people.cs.aau.dk/%7Enormark/prog3-03/html/notes/oop-scheme_themes-classes-objects-sec.html#oop-scheme_classes-objects_title_1. For zero points, what is the distance between section 29.4 and python?
2018-03-14 16:24:41		Classes and objects in Scheme
2018-03-14 16:24:41		xxx  (edited)
2018-03-27 17:29:09	timm	https://github.com/txt/ase16/blob/master/doc/dsl.md
2018-03-27 17:29:09		doc/dsl.md
2018-03-27 17:29:09		```
2018-03-27 17:29:09		[home](http://tiny.cc/ase2016) |
2018-03-27 17:29:09		[copyright](https://github.com/txt/ase16/blob/master/LICENSE.md) &copy;2016, tim&commat;menzies.us
2018-03-27 17:29:09		<br>
2018-03-27 17:29:09		[<img width=900 src="https://raw.githubusercontent.com/txt/ase16/master/img/mase16.png">](http://tiny.cc/ase2016)<br>
2018-03-27 17:29:09		[overview](https://github.com/txt/ase16/blob/master/doc/overview.md) |
2018-03-27 17:29:09		[syllabus](https://github.com/txt/ase16/blob/master/doc/syllabus.md) |
2018-03-27 17:29:09		[src](https://github.com/txt/ase16/tree/master/src) |
2018-03-27 17:29:09		[submit](http://tiny.cc/ase16give) |
2018-03-27 17:29:09		[chat](https://ase16.slack.com/)
2018-03-27 17:29:09		<em>(I keep being asked... where to get models? where to get models? After this lecture, you will have
2018-03-27 17:29:09		access to hundreds of models as well as methods for interviewing humans to learn their models.)</em>
2018-03-27 17:29:09		For source code for the following, see [dsl.py](../src/dsl.py).
2018-03-27 17:29:09		# Domain-Specific Languages 101 (in Python)
2018-03-27 17:29:09		This files shows an example of a small object-based DSL (domain-specific language) in Python.
2018-03-27 17:29:09		In the language, all the tedious stuff is implemented in superclasses, letting
2018-03-27 17:29:09		users express their knowledge in simple succinct subclasses.
2018-03-27 17:29:09		The example here will be compartmental modeling and is
2018-03-27 17:29:09		adapted from some  excellent code from
2018-03-27 17:29:09		[Abraham Flaxman](https://gist.github.com/aflaxman/4121076#file-sdm_diaper_delivery-ipynb).
2018-03-27 17:29:09		Note that students of CSx91 have ready access to many 
2018-03-27 17:29:09		[compartmental models about software systems](http://unbox.org/doc/optimalML/madachyBook.pdf) ranging from
2018-03-27 17:29:09		![simple](../img/simpleCm.png)
2018-03-27 17:29:09		to the very complex.
2018-03-27 17:29:09		![complex](../img/complexCm.png)
2018-03-27 17:29:09		## Theory
2018-03-27 17:29:09		<img align=right width=300 src="http://www.quickmeme.com/img/23/23d727872d13ac2b652ea175ac6b63a1792688690e9eb6f7d7d0a82bc1ed94c5.jpg">
2018-03-27 17:29:09		Does your language pass the elbow test? Do your business users elbow you of the way
2018-03-27 17:29:09		in their haste to fix what is obviously wrong with your code?
2018-03-27 17:29:09		No?  Then you obviously:
2018-03-27 17:29:09		+ You are not speaking their language. 
2018-03-27 17:29:09		+ You've lost that an
2018-03-27 17:29:09		entire community that might have been able to audit,
2018-03-27 17:29:09		verify, and evolve your code.
2018-03-27 17:29:09		Enter domain-specific languages (DSLs). DSLs have also been called:
2018-03-27 17:29:09		+ [little languages](http://staff.um.edu.mt/afra1/seminar/little-languages.pdf);
2018-03-27 17:29:09		+ micro-languages,
2018-03-27 17:29:09		+ application languages,
2018-03-27 17:29:09		+ very high level languages.
2018-03-27 17:29:09		Example DSLs:
2018-03-27 17:29:09		+ SQL
2018-03-27 17:29:09		+ AWK (unix text reporting language)
2018-03-27 17:29:09		+ Regular expressions
2018-03-27 17:29:09		<img align=right width=400 src="http://api.ning.com/files/tcX1134PNX2h4QP7dIMahJNNnQqsDMD0tM6jzv6Da8-r1vv1wLntg3SRQsn0r6kCmIXa2Bp4VSaSFgRLkQjfdkleLqeuMgdJ/aliensymbols1.bmp">
2018-03-27 17:29:09		DSLs are useful since
2018-03-27 17:29:09		different representations of the same concepts can make certain inferences easier. Here's Douglas
2018-03-27 17:29:09		Hofstadter from his book Godel, Esher, Bach:
2018-03-27 17:29:09		+  When you confront a (system) that you know nothing of,... your problem is how to assign interpretations to its symbols in a meaningful way...:
2018-03-27 17:29:09		+ You may make several tentative stabs in the dark before finding a good set of words to associate with the symbols.
2018-03-27 17:29:09		+ It is very similar to attempts to crack a code, or to decipher inscriptions in an unknown language...
2018-03-27 17:29:09		+ When you hit a right choice... all of a sudden things just feel right, and work speeds up enormously.
2018-03-27 17:29:09		+ Pretty soon everything falls into place."
2018-03-27 17:29:09		Here's James Martin from his book Design of Real-time Computer Systems:
2018-03-27 17:29:09		+ We must develop languages that the scientist, the architect, the teacher, and the layman can use without being computer experts.
2018-03-27 17:29:09		+ The language for each user must be as natural as possible to him.
2018-03-27 17:29:09		+ The statistician must talk to his terminal in the language of statistics.
2018-03-27 17:29:09		+ The civil engineer must use the language of civil engineering.
2018-03-27 17:29:09		+ When a man (sic) learns his profession he must learn the problem-oriented languages to go with that profession.
2018-03-27 17:29:09		<img align=right width=400 src="http://image.slidesharecdn.com/letmakeuserhappy-130613095746-phpapp01/95/let-make-user-happy-1-638.jpg?cb=1371117649">
2018-03-27 17:29:09		A DSL is a very high-level language that a user can learn and use in less than a day. Such productivity can only be achieved by tailoring the language to the special needs and skills of a particular class of users in a particular domain.
2018-03-27 17:29:09		So one way to find DSL is listen to experts in some field commenting on their processing. Often that processing
2018-03-27 17:29:09		has repeated domain-specific idioms:
2018-03-27 17:29:09		+ Idioms= Methods imposed by programmers to handle common forms, procedures.
2018-03-27 17:29:09		+ E.g. Ensure data is saved before the window is closed.
2018-03-27 17:29:09		+ E.g. Before conducting expensive tests, perform cheap tests that can rule out need for expensive tests.
2018-03-27 17:29:09		In a DSL-based software development process, the analyst:
2018-03-27 17:29:09		+ Identifies the users and their tasks;
2018-03-27 17:29:09		+ Identifies the common idioms used by those users;
2018-03-27 17:29:09		+ Invents a little language to handle those idioms;
2018-03-27 17:29:09		+ Generates sample sentences in that language;
2018-03-27 17:29:09		+ Shows those sentences to the user and trains them how to write their own.
2018-03-27 17:29:09		That is, instead of the analyst writing the application, the analysts writes tools that let a user community write and maintain their own knowledge.
2018-03-27 17:29:09		The benefits of DSL (productivity, explanatory, ownership by the users) can be out-weighed by the cost of building the DSL.
2018-03-27 17:29:09		Two ways to build a DSL:
2018-03-27 17:29:09		+ External DSL: code is a string which is read, parsed, and executed by (say) Python.
2018-03-27 17:29:09		+ E.g. see [PyParsing](http://www.slideshare.net/Siddhi/creating-domain-specific-languages-in-python)
2018-03-27 17:29:09		+ Internal DSL: using features of the language, enable people to write code that resembles domain syntax.
2018-03-27 17:29:09		+ See  decorators, context managers
2018-03-27 17:29:09		+ Code the idioms in general superclasses;
2018-03-27 17:29:09		+ Leave the domain-specific stuff for subclasses
2018-03-27 17:29:09		## Writing your own DSL in Python
2018-03-27 17:29:09		### Decorators
2018-03-27 17:29:09		A test engine, as a Python decorator
2018-03-27 17:29:09		```python
2018-03-27 17:29:09		def ok(*lst):
2018-03-27 17:29:09		print "### ",lst[0].__name__
2018-03-27 17:29:09		for one in lst: unittest(one)
2018-03-27 17:29:09		return one
2018-03-27 17:29:09		class unittest:
2018-03-27 17:29:09		tries = fails = 0  #  tracks the record so far
2018-03-27 17:29:09		@staticmethod
2018-03-27 17:29:09		def score():
2018-03-27 17:29:09		t = unittest.tries
2018-03-27 17:29:09		f = unittest.fails
2018-03-27 17:29:09		return "# TRIES= %s FAIL= %s %%PASS = %s%%"  % (
2018-03-27 17:29:09		t,f,int(round(t*100/(t+f+0.001))))
2018-03-27 17:29:09		def __init__(i,test):
2018-03-27 17:29:09		unittest.tries += 1
2018-03-27 17:29:09		try:
2018-03-27 17:29:09		test()
2018-03-27 17:29:09		except Exception,e:
2018-03-27 17:29:09		unittest.fails += 1
2018-03-27 17:29:09		i.report(test)
2018-03-27 17:29:09		def report(i,test):
2018-03-27 17:29:09		import traceback
2018-03-27 17:29:09		print traceback.format_exc()
2018-03-27 17:29:09		print unittest.score(),':',test.__name__
2018-03-27 17:29:09		```
2018-03-27 17:29:09		### Context Managers
2018-03-27 17:29:09		Here's an idiom for writing HTML:
2018-03-27 17:29:09		```python
2018-03-27 17:29:09		from contextlib import contextmanager
2018-03-27 17:29:09		@contextmanager
2018-03-27 17:29:09		def tag(name):
2018-03-27 17:29:09		print "<%s>" % name
2018-03-27 17:29:09		yield
2018-03-27 17:29:09		print "</%s>" % name
2018-03-27 17:29:09		>>> with tag("h1"):
2018-03-27 17:29:09		...    print "foo"
2018-03-27 17:29:09		...
2018-03-27 17:29:09		<h1>
2018-03-27 17:29:09		foo
2018-03-27 17:29:09		</h1>
2018-03-27 17:29:09		```
2018-03-27 17:29:09		Another example (print runtime of things):
2018-03-27 17:29:09		```python
2018-03-27 17:29:09		@contextmanager
2018-03-27 17:29:09		def duration():
2018-03-27 17:29:09		t1 = time.time()
2018-03-27 17:29:09		yield
2018-03-27 17:29:09		t2 = time.time()
2018-03-27 17:29:09		print("\n" + "-" * 72)
2018-03-27 17:29:09		print("# Runtime: %.3f secs" % (t2-t1))
2018-03-27 17:29:09		def _durationDemo():
2018-03-27 17:29:09		with duration():
2018-03-27 17:29:09		##do something
2018-03-27 17:29:09		```
2018-03-27 17:29:09		Yet another example (always close things):
2018-03-27 17:29:09		```python
2018-03-27 17:29:09		from contextlib import contextmanager
2018-03-27 17:29:09		from contextlib import closing
2018-03-27 17:29:09		import urllib
2018-03-27 17:29:09		@contextmanager
2018-03-27 17:29:09		def closing(thing):
2018-03-27 17:29:09		try:
2018-03-27 17:29:09		yield thing
2018-03-27 17:29:09		finally:
2018-03-27 17:29:09		thing.close()
2018-03-27 17:29:09		with closing(urllib.urlopen('http://www.python.org')) as page:
2018-03-27 17:29:09		for line in page:
2018-03-27 17:29:09		print line
2018-03-27 17:29:09		```
2018-03-27 17:29:09		## Other Techniques
2018-03-27 17:29:09		Use the sub-classing trick (this works in Python, or any other OO language).
2018-03-27 17:29:09		+ Place the generic processing in superclasses.
2018-03-27 17:29:09		+ Users write the particulars of their domain in subclasses.
2018-03-27 17:29:09		+ Example, see below.
2018-03-27 17:29:09		See also [Implementing Domain Specific Languages In Python](http://www.pyvideo.org/video/251/pycon-2010--implementing-domain-specific-language) (very long!).
2018-03-27 17:29:09		## SAF: Stock and Flow (Compartmental Modeling in Python)
2018-03-27 17:29:09		From Wikipedia:
2018-03-27 17:29:09		+ Economics, business, accounting, and related
2018-03-27 17:29:09		fields often distinguish between quantities that are
2018-03-27 17:29:09		_stocks_ and those that are flows. These differ in
2018-03-27 17:29:09		their units of measurement.
2018-03-27 17:29:09		+ A stock variable is
2018-03-27 17:29:09		measured at one specific time, and represents a
2018-03-27 17:29:09		quantity existing at that poi? 
2018-04-08 13:24:54	timm	For Tuesday
2018-04-08 13:24:54		https://www.youtube.com/watch?v=52SVAMM3V78&feature=share
2018-04-08 13:24:54		Robert Attorri: See Light Table In Action (https://www.youtube.com/watch?v=52SVAMM3V78&feature=share) 
2018-04-12 14:50:46	timm	Design patterns, in action 
2018-04-12 14:50:46		https://www.toptal.com/python/python-design-patterns
2018-04-12 14:50:46		Python Design Patterns: For Sleek And Fashionable Code
2018-04-12 14:50:46		Python is a powerful, object-based, high-level programming language with dynamic typing and binding. Due to its flexibility and power, developers often employ certain rules, or Python design patterns. What makes them so important and what do does this mean for the average Python developer? In this post, Toptal Senior Software Engineer Andrei Boyanov explains why Python is great for design patterns, and how they can be used to unlock even more potential, or to streamline development and make code more maintainable. 
